// Generated by jextract

package ax.xz.raw.posix.linux.gen;

import ax.xz.raw.posix.gen.sockaddr;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct ifreq {
 *     union {
 *         char ifrn_name[16];
 *     } ifr_ifrn;
 *     union {
 *         struct sockaddr ifru_addr;
 *         struct sockaddr ifru_dstaddr;
 *         struct sockaddr ifru_broadaddr;
 *         struct sockaddr ifru_netmask;
 *         struct sockaddr ifru_hwaddr;
 *         short ifru_flags;
 *         int ifru_ivalue;
 *         int ifru_mtu;
 *         struct ifmap ifru_map;
 *         char ifru_slave[16];
 *         char ifru_newname[16];
 *         void *ifru_data;
 *         struct if_settings ifru_settings;
 *     } ifr_ifru;
 * }
 * }
 */
public class ifreq {

    ifreq() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        ifreq.ifr_ifrn.layout().withName("ifr_ifrn"),
        ifreq.ifr_ifru.layout().withName("ifr_ifru")
    ).withName("ifreq");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    /**
     * {@snippet lang=c :
     * union {
     *     char ifrn_name[16];
     * }
     * }
     */
    public static class ifr_ifrn {

        ifr_ifrn() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(16, linux_tun_h.C_CHAR).withName("ifrn_name")
        ).withName("$anon$234:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final SequenceLayout ifrn_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ifrn_name"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static final SequenceLayout ifrn_name$layout() {
            return ifrn_name$LAYOUT;
        }

        private static final long ifrn_name$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static final long ifrn_name$offset() {
            return ifrn_name$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static MemorySegment ifrn_name(MemorySegment union) {
            return union.asSlice(ifrn_name$OFFSET, ifrn_name$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static void ifrn_name(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifrn_name$OFFSET, ifrn_name$LAYOUT.byteSize());
        }

        private static long[] ifrn_name$DIMS = { 16 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static long[] ifrn_name$dimensions() {
            return ifrn_name$DIMS;
        }
        private static final VarHandle ifrn_name$ELEM_HANDLE = ifrn_name$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static byte ifrn_name(MemorySegment union, long index0) {
            return (byte)ifrn_name$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * char ifrn_name[16]
         * }
         */
        public static void ifrn_name(MemorySegment union, long index0, byte fieldValue) {
            ifrn_name$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout ifr_ifrn$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifr_ifrn"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     char ifrn_name[16];
     * } ifr_ifrn
     * }
     */
    public static final GroupLayout ifr_ifrn$layout() {
        return ifr_ifrn$LAYOUT;
    }

    private static final long ifr_ifrn$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     char ifrn_name[16];
     * } ifr_ifrn
     * }
     */
    public static final long ifr_ifrn$offset() {
        return ifr_ifrn$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     char ifrn_name[16];
     * } ifr_ifrn
     * }
     */
    public static MemorySegment ifr_ifrn(MemorySegment struct) {
        return struct.asSlice(ifr_ifrn$OFFSET, ifr_ifrn$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     char ifrn_name[16];
     * } ifr_ifrn
     * }
     */
    public static void ifr_ifrn(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifr_ifrn$OFFSET, ifr_ifrn$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * union {
     *     struct sockaddr ifru_addr;
     *     struct sockaddr ifru_dstaddr;
     *     struct sockaddr ifru_broadaddr;
     *     struct sockaddr ifru_netmask;
     *     struct sockaddr ifru_hwaddr;
     *     short ifru_flags;
     *     int ifru_ivalue;
     *     int ifru_mtu;
     *     struct ifmap ifru_map;
     *     char ifru_slave[16];
     *     char ifru_newname[16];
     *     void *ifru_data;
     *     struct if_settings ifru_settings;
     * }
     * }
     */
    public static class ifr_ifru {

        ifr_ifru() {
            // Should not be called directly
        }

        private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
            sockaddr.layout().withName("ifru_addr"),
            sockaddr.layout().withName("ifru_dstaddr"),
            sockaddr.layout().withName("ifru_broadaddr"),
            sockaddr.layout().withName("ifru_netmask"),
            sockaddr.layout().withName("ifru_hwaddr"),
            linux_tun_h.C_SHORT.withName("ifru_flags"),
            linux_tun_h.C_INT.withName("ifru_ivalue"),
            linux_tun_h.C_INT.withName("ifru_mtu"),
            ifmap.layout().withName("ifru_map"),
            MemoryLayout.sequenceLayout(16, linux_tun_h.C_CHAR).withName("ifru_slave"),
            MemoryLayout.sequenceLayout(16, linux_tun_h.C_CHAR).withName("ifru_newname"),
            linux_tun_h.C_POINTER.withName("ifru_data"),
            if_settings.layout().withName("ifru_settings")
        ).withName("$anon$239:2");

        /**
         * The layout of this union
         */
        public static final GroupLayout layout() {
            return $LAYOUT;
        }

        private static final GroupLayout ifru_addr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_addr"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_addr
         * }
         */
        public static final GroupLayout ifru_addr$layout() {
            return ifru_addr$LAYOUT;
        }

        private static final long ifru_addr$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_addr
         * }
         */
        public static final long ifru_addr$offset() {
            return ifru_addr$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_addr
         * }
         */
        public static MemorySegment ifru_addr(MemorySegment union) {
            return union.asSlice(ifru_addr$OFFSET, ifru_addr$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_addr
         * }
         */
        public static void ifru_addr(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_addr$OFFSET, ifru_addr$LAYOUT.byteSize());
        }

        private static final GroupLayout ifru_dstaddr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_dstaddr"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_dstaddr
         * }
         */
        public static final GroupLayout ifru_dstaddr$layout() {
            return ifru_dstaddr$LAYOUT;
        }

        private static final long ifru_dstaddr$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_dstaddr
         * }
         */
        public static final long ifru_dstaddr$offset() {
            return ifru_dstaddr$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_dstaddr
         * }
         */
        public static MemorySegment ifru_dstaddr(MemorySegment union) {
            return union.asSlice(ifru_dstaddr$OFFSET, ifru_dstaddr$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_dstaddr
         * }
         */
        public static void ifru_dstaddr(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_dstaddr$OFFSET, ifru_dstaddr$LAYOUT.byteSize());
        }

        private static final GroupLayout ifru_broadaddr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_broadaddr"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_broadaddr
         * }
         */
        public static final GroupLayout ifru_broadaddr$layout() {
            return ifru_broadaddr$LAYOUT;
        }

        private static final long ifru_broadaddr$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_broadaddr
         * }
         */
        public static final long ifru_broadaddr$offset() {
            return ifru_broadaddr$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_broadaddr
         * }
         */
        public static MemorySegment ifru_broadaddr(MemorySegment union) {
            return union.asSlice(ifru_broadaddr$OFFSET, ifru_broadaddr$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_broadaddr
         * }
         */
        public static void ifru_broadaddr(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_broadaddr$OFFSET, ifru_broadaddr$LAYOUT.byteSize());
        }

        private static final GroupLayout ifru_netmask$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_netmask"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_netmask
         * }
         */
        public static final GroupLayout ifru_netmask$layout() {
            return ifru_netmask$LAYOUT;
        }

        private static final long ifru_netmask$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_netmask
         * }
         */
        public static final long ifru_netmask$offset() {
            return ifru_netmask$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_netmask
         * }
         */
        public static MemorySegment ifru_netmask(MemorySegment union) {
            return union.asSlice(ifru_netmask$OFFSET, ifru_netmask$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_netmask
         * }
         */
        public static void ifru_netmask(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_netmask$OFFSET, ifru_netmask$LAYOUT.byteSize());
        }

        private static final GroupLayout ifru_hwaddr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_hwaddr"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_hwaddr
         * }
         */
        public static final GroupLayout ifru_hwaddr$layout() {
            return ifru_hwaddr$LAYOUT;
        }

        private static final long ifru_hwaddr$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_hwaddr
         * }
         */
        public static final long ifru_hwaddr$offset() {
            return ifru_hwaddr$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_hwaddr
         * }
         */
        public static MemorySegment ifru_hwaddr(MemorySegment union) {
            return union.asSlice(ifru_hwaddr$OFFSET, ifru_hwaddr$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct sockaddr ifru_hwaddr
         * }
         */
        public static void ifru_hwaddr(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_hwaddr$OFFSET, ifru_hwaddr$LAYOUT.byteSize());
        }

        private static final OfShort ifru_flags$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ifru_flags"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * short ifru_flags
         * }
         */
        public static final OfShort ifru_flags$layout() {
            return ifru_flags$LAYOUT;
        }

        private static final long ifru_flags$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * short ifru_flags
         * }
         */
        public static final long ifru_flags$offset() {
            return ifru_flags$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * short ifru_flags
         * }
         */
        public static short ifru_flags(MemorySegment union) {
            return union.get(ifru_flags$LAYOUT, ifru_flags$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * short ifru_flags
         * }
         */
        public static void ifru_flags(MemorySegment union, short fieldValue) {
            union.set(ifru_flags$LAYOUT, ifru_flags$OFFSET, fieldValue);
        }

        private static final OfInt ifru_ivalue$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ifru_ivalue"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int ifru_ivalue
         * }
         */
        public static final OfInt ifru_ivalue$layout() {
            return ifru_ivalue$LAYOUT;
        }

        private static final long ifru_ivalue$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int ifru_ivalue
         * }
         */
        public static final long ifru_ivalue$offset() {
            return ifru_ivalue$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int ifru_ivalue
         * }
         */
        public static int ifru_ivalue(MemorySegment union) {
            return union.get(ifru_ivalue$LAYOUT, ifru_ivalue$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int ifru_ivalue
         * }
         */
        public static void ifru_ivalue(MemorySegment union, int fieldValue) {
            union.set(ifru_ivalue$LAYOUT, ifru_ivalue$OFFSET, fieldValue);
        }

        private static final OfInt ifru_mtu$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ifru_mtu"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * int ifru_mtu
         * }
         */
        public static final OfInt ifru_mtu$layout() {
            return ifru_mtu$LAYOUT;
        }

        private static final long ifru_mtu$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * int ifru_mtu
         * }
         */
        public static final long ifru_mtu$offset() {
            return ifru_mtu$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * int ifru_mtu
         * }
         */
        public static int ifru_mtu(MemorySegment union) {
            return union.get(ifru_mtu$LAYOUT, ifru_mtu$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * int ifru_mtu
         * }
         */
        public static void ifru_mtu(MemorySegment union, int fieldValue) {
            union.set(ifru_mtu$LAYOUT, ifru_mtu$OFFSET, fieldValue);
        }

        private static final GroupLayout ifru_map$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_map"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct ifmap ifru_map
         * }
         */
        public static final GroupLayout ifru_map$layout() {
            return ifru_map$LAYOUT;
        }

        private static final long ifru_map$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct ifmap ifru_map
         * }
         */
        public static final long ifru_map$offset() {
            return ifru_map$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct ifmap ifru_map
         * }
         */
        public static MemorySegment ifru_map(MemorySegment union) {
            return union.asSlice(ifru_map$OFFSET, ifru_map$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct ifmap ifru_map
         * }
         */
        public static void ifru_map(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_map$OFFSET, ifru_map$LAYOUT.byteSize());
        }

        private static final SequenceLayout ifru_slave$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ifru_slave"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static final SequenceLayout ifru_slave$layout() {
            return ifru_slave$LAYOUT;
        }

        private static final long ifru_slave$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static final long ifru_slave$offset() {
            return ifru_slave$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static MemorySegment ifru_slave(MemorySegment union) {
            return union.asSlice(ifru_slave$OFFSET, ifru_slave$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static void ifru_slave(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_slave$OFFSET, ifru_slave$LAYOUT.byteSize());
        }

        private static long[] ifru_slave$DIMS = { 16 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static long[] ifru_slave$dimensions() {
            return ifru_slave$DIMS;
        }
        private static final VarHandle ifru_slave$ELEM_HANDLE = ifru_slave$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static byte ifru_slave(MemorySegment union, long index0) {
            return (byte)ifru_slave$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * char ifru_slave[16]
         * }
         */
        public static void ifru_slave(MemorySegment union, long index0, byte fieldValue) {
            ifru_slave$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final SequenceLayout ifru_newname$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ifru_newname"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static final SequenceLayout ifru_newname$layout() {
            return ifru_newname$LAYOUT;
        }

        private static final long ifru_newname$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static final long ifru_newname$offset() {
            return ifru_newname$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static MemorySegment ifru_newname(MemorySegment union) {
            return union.asSlice(ifru_newname$OFFSET, ifru_newname$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static void ifru_newname(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_newname$OFFSET, ifru_newname$LAYOUT.byteSize());
        }

        private static long[] ifru_newname$DIMS = { 16 };

        /**
         * Dimensions for array field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static long[] ifru_newname$dimensions() {
            return ifru_newname$DIMS;
        }
        private static final VarHandle ifru_newname$ELEM_HANDLE = ifru_newname$LAYOUT.varHandle(sequenceElement());

        /**
         * Indexed getter for field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static byte ifru_newname(MemorySegment union, long index0) {
            return (byte)ifru_newname$ELEM_HANDLE.get(union, 0L, index0);
        }

        /**
         * Indexed setter for field:
         * {@snippet lang=c :
         * char ifru_newname[16]
         * }
         */
        public static void ifru_newname(MemorySegment union, long index0, byte fieldValue) {
            ifru_newname$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
        }

        private static final AddressLayout ifru_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ifru_data"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * void *ifru_data
         * }
         */
        public static final AddressLayout ifru_data$layout() {
            return ifru_data$LAYOUT;
        }

        private static final long ifru_data$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * void *ifru_data
         * }
         */
        public static final long ifru_data$offset() {
            return ifru_data$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * void *ifru_data
         * }
         */
        public static MemorySegment ifru_data(MemorySegment union) {
            return union.get(ifru_data$LAYOUT, ifru_data$OFFSET);
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * void *ifru_data
         * }
         */
        public static void ifru_data(MemorySegment union, MemorySegment fieldValue) {
            union.set(ifru_data$LAYOUT, ifru_data$OFFSET, fieldValue);
        }

        private static final GroupLayout ifru_settings$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifru_settings"));

        /**
         * Layout for field:
         * {@snippet lang=c :
         * struct if_settings ifru_settings
         * }
         */
        public static final GroupLayout ifru_settings$layout() {
            return ifru_settings$LAYOUT;
        }

        private static final long ifru_settings$OFFSET = 0;

        /**
         * Offset for field:
         * {@snippet lang=c :
         * struct if_settings ifru_settings
         * }
         */
        public static final long ifru_settings$offset() {
            return ifru_settings$OFFSET;
        }

        /**
         * Getter for field:
         * {@snippet lang=c :
         * struct if_settings ifru_settings
         * }
         */
        public static MemorySegment ifru_settings(MemorySegment union) {
            return union.asSlice(ifru_settings$OFFSET, ifru_settings$LAYOUT.byteSize());
        }

        /**
         * Setter for field:
         * {@snippet lang=c :
         * struct if_settings ifru_settings
         * }
         */
        public static void ifru_settings(MemorySegment union, MemorySegment fieldValue) {
            MemorySegment.copy(fieldValue, 0L, union, ifru_settings$OFFSET, ifru_settings$LAYOUT.byteSize());
        }

        /**
         * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
         * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
         */
        public static MemorySegment asSlice(MemorySegment array, long index) {
            return array.asSlice(layout().byteSize() * index);
        }

        /**
         * The size (in bytes) of this union
         */
        public static long sizeof() { return layout().byteSize(); }

        /**
         * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
         */
        public static MemorySegment allocate(SegmentAllocator allocator) {
            return allocator.allocate(layout());
        }

        /**
         * Allocate an array of size {@code elementCount} using {@code allocator}.
         * The returned segment has size {@code elementCount * layout().byteSize()}.
         */
        public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
            return reinterpret(addr, 1, arena, cleanup);
        }

        /**
         * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
         * The returned segment has size {@code elementCount * layout().byteSize()}
         */
        public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
            return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
        }
    }

    private static final GroupLayout ifr_ifru$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifr_ifru"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * union {
     *     struct sockaddr ifru_addr;
     *     struct sockaddr ifru_dstaddr;
     *     struct sockaddr ifru_broadaddr;
     *     struct sockaddr ifru_netmask;
     *     struct sockaddr ifru_hwaddr;
     *     short ifru_flags;
     *     int ifru_ivalue;
     *     int ifru_mtu;
     *     struct ifmap ifru_map;
     *     char ifru_slave[16];
     *     char ifru_newname[16];
     *     void *ifru_data;
     *     struct if_settings ifru_settings;
     * } ifr_ifru
     * }
     */
    public static final GroupLayout ifr_ifru$layout() {
        return ifr_ifru$LAYOUT;
    }

    private static final long ifr_ifru$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * union {
     *     struct sockaddr ifru_addr;
     *     struct sockaddr ifru_dstaddr;
     *     struct sockaddr ifru_broadaddr;
     *     struct sockaddr ifru_netmask;
     *     struct sockaddr ifru_hwaddr;
     *     short ifru_flags;
     *     int ifru_ivalue;
     *     int ifru_mtu;
     *     struct ifmap ifru_map;
     *     char ifru_slave[16];
     *     char ifru_newname[16];
     *     void *ifru_data;
     *     struct if_settings ifru_settings;
     * } ifr_ifru
     * }
     */
    public static final long ifr_ifru$offset() {
        return ifr_ifru$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * union {
     *     struct sockaddr ifru_addr;
     *     struct sockaddr ifru_dstaddr;
     *     struct sockaddr ifru_broadaddr;
     *     struct sockaddr ifru_netmask;
     *     struct sockaddr ifru_hwaddr;
     *     short ifru_flags;
     *     int ifru_ivalue;
     *     int ifru_mtu;
     *     struct ifmap ifru_map;
     *     char ifru_slave[16];
     *     char ifru_newname[16];
     *     void *ifru_data;
     *     struct if_settings ifru_settings;
     * } ifr_ifru
     * }
     */
    public static MemorySegment ifr_ifru(MemorySegment struct) {
        return struct.asSlice(ifr_ifru$OFFSET, ifr_ifru$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * union {
     *     struct sockaddr ifru_addr;
     *     struct sockaddr ifru_dstaddr;
     *     struct sockaddr ifru_broadaddr;
     *     struct sockaddr ifru_netmask;
     *     struct sockaddr ifru_hwaddr;
     *     short ifru_flags;
     *     int ifru_ivalue;
     *     int ifru_mtu;
     *     struct ifmap ifru_map;
     *     char ifru_slave[16];
     *     char ifru_newname[16];
     *     void *ifru_data;
     *     struct if_settings ifru_settings;
     * } ifr_ifru
     * }
     */
    public static void ifr_ifru(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifr_ifru$OFFSET, ifr_ifru$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

