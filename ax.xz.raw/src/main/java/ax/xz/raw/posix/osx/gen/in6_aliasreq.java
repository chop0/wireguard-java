// Generated by jextract

package ax.xz.raw.posix.osx.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct in6_aliasreq {
 *     char ifra_name[16];
 *     struct sockaddr_in6 ifra_addr;
 *     struct sockaddr_in6 ifra_dstaddr;
 *     struct sockaddr_in6 ifra_prefixmask;
 *     int ifra_flags;
 *     struct in6_addrlifetime ifra_lifetime;
 * }
 * }
 */
public class in6_aliasreq {

    in6_aliasreq() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(16, osx_tun_h.C_CHAR).withName("ifra_name"),
        sockaddr_in6.layout().withName("ifra_addr"),
        sockaddr_in6.layout().withName("ifra_dstaddr"),
        sockaddr_in6.layout().withName("ifra_prefixmask"),
        osx_tun_h.C_INT.withName("ifra_flags"),
        in6_addrlifetime.layout().withName("ifra_lifetime")
    ).withName("in6_aliasreq");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout ifra_name$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("ifra_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static final SequenceLayout ifra_name$layout() {
        return ifra_name$LAYOUT;
    }

    private static final long ifra_name$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static final long ifra_name$offset() {
        return ifra_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static MemorySegment ifra_name(MemorySegment struct) {
        return struct.asSlice(ifra_name$OFFSET, ifra_name$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static void ifra_name(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifra_name$OFFSET, ifra_name$LAYOUT.byteSize());
    }

    private static long[] ifra_name$DIMS = { 16 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static long[] ifra_name$dimensions() {
        return ifra_name$DIMS;
    }
    private static final VarHandle ifra_name$ELEM_HANDLE = ifra_name$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static byte ifra_name(MemorySegment struct, long index0) {
        return (byte)ifra_name$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * char ifra_name[16]
     * }
     */
    public static void ifra_name(MemorySegment struct, long index0, byte fieldValue) {
        ifra_name$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final GroupLayout ifra_addr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifra_addr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_addr
     * }
     */
    public static final GroupLayout ifra_addr$layout() {
        return ifra_addr$LAYOUT;
    }

    private static final long ifra_addr$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_addr
     * }
     */
    public static final long ifra_addr$offset() {
        return ifra_addr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_addr
     * }
     */
    public static MemorySegment ifra_addr(MemorySegment struct) {
        return struct.asSlice(ifra_addr$OFFSET, ifra_addr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_addr
     * }
     */
    public static void ifra_addr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifra_addr$OFFSET, ifra_addr$LAYOUT.byteSize());
    }

    private static final GroupLayout ifra_dstaddr$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifra_dstaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_dstaddr
     * }
     */
    public static final GroupLayout ifra_dstaddr$layout() {
        return ifra_dstaddr$LAYOUT;
    }

    private static final long ifra_dstaddr$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_dstaddr
     * }
     */
    public static final long ifra_dstaddr$offset() {
        return ifra_dstaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_dstaddr
     * }
     */
    public static MemorySegment ifra_dstaddr(MemorySegment struct) {
        return struct.asSlice(ifra_dstaddr$OFFSET, ifra_dstaddr$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_dstaddr
     * }
     */
    public static void ifra_dstaddr(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifra_dstaddr$OFFSET, ifra_dstaddr$LAYOUT.byteSize());
    }

    private static final GroupLayout ifra_prefixmask$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifra_prefixmask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_prefixmask
     * }
     */
    public static final GroupLayout ifra_prefixmask$layout() {
        return ifra_prefixmask$LAYOUT;
    }

    private static final long ifra_prefixmask$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_prefixmask
     * }
     */
    public static final long ifra_prefixmask$offset() {
        return ifra_prefixmask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_prefixmask
     * }
     */
    public static MemorySegment ifra_prefixmask(MemorySegment struct) {
        return struct.asSlice(ifra_prefixmask$OFFSET, ifra_prefixmask$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct sockaddr_in6 ifra_prefixmask
     * }
     */
    public static void ifra_prefixmask(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifra_prefixmask$OFFSET, ifra_prefixmask$LAYOUT.byteSize());
    }

    private static final OfInt ifra_flags$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ifra_flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int ifra_flags
     * }
     */
    public static final OfInt ifra_flags$layout() {
        return ifra_flags$LAYOUT;
    }

    private static final long ifra_flags$OFFSET = 100;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int ifra_flags
     * }
     */
    public static final long ifra_flags$offset() {
        return ifra_flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int ifra_flags
     * }
     */
    public static int ifra_flags(MemorySegment struct) {
        return struct.get(ifra_flags$LAYOUT, ifra_flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int ifra_flags
     * }
     */
    public static void ifra_flags(MemorySegment struct, int fieldValue) {
        struct.set(ifra_flags$LAYOUT, ifra_flags$OFFSET, fieldValue);
    }

    private static final GroupLayout ifra_lifetime$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("ifra_lifetime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct in6_addrlifetime ifra_lifetime
     * }
     */
    public static final GroupLayout ifra_lifetime$layout() {
        return ifra_lifetime$LAYOUT;
    }

    private static final long ifra_lifetime$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct in6_addrlifetime ifra_lifetime
     * }
     */
    public static final long ifra_lifetime$offset() {
        return ifra_lifetime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct in6_addrlifetime ifra_lifetime
     * }
     */
    public static MemorySegment ifra_lifetime(MemorySegment struct) {
        return struct.asSlice(ifra_lifetime$OFFSET, ifra_lifetime$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct in6_addrlifetime ifra_lifetime
     * }
     */
    public static void ifra_lifetime(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, ifra_lifetime$OFFSET, ifra_lifetime$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

