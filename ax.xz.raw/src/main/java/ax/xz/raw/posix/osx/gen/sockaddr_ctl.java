// Generated by jextract

package ax.xz.raw.posix.osx.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct sockaddr_ctl {
 *     u_char sc_len;
 *     u_char sc_family;
 *     u_int16_t ss_sysaddr;
 *     u_int32_t sc_id;
 *     u_int32_t sc_unit;
 *     u_int32_t sc_reserved[5];
 * }
 * }
 */
public class sockaddr_ctl {

    sockaddr_ctl() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        osx_tun_h.C_CHAR.withName("sc_len"),
        osx_tun_h.C_CHAR.withName("sc_family"),
        osx_tun_h.C_SHORT.withName("ss_sysaddr"),
        osx_tun_h.C_INT.withName("sc_id"),
        osx_tun_h.C_INT.withName("sc_unit"),
        MemoryLayout.sequenceLayout(5, osx_tun_h.C_INT).withName("sc_reserved")
    ).withName("sockaddr_ctl");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfByte sc_len$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sc_len"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_char sc_len
     * }
     */
    public static final OfByte sc_len$layout() {
        return sc_len$LAYOUT;
    }

    private static final long sc_len$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_char sc_len
     * }
     */
    public static final long sc_len$offset() {
        return sc_len$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_char sc_len
     * }
     */
    public static byte sc_len(MemorySegment struct) {
        return struct.get(sc_len$LAYOUT, sc_len$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_char sc_len
     * }
     */
    public static void sc_len(MemorySegment struct, byte fieldValue) {
        struct.set(sc_len$LAYOUT, sc_len$OFFSET, fieldValue);
    }

    private static final OfByte sc_family$LAYOUT = (OfByte)$LAYOUT.select(groupElement("sc_family"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_char sc_family
     * }
     */
    public static final OfByte sc_family$layout() {
        return sc_family$LAYOUT;
    }

    private static final long sc_family$OFFSET = 1;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_char sc_family
     * }
     */
    public static final long sc_family$offset() {
        return sc_family$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_char sc_family
     * }
     */
    public static byte sc_family(MemorySegment struct) {
        return struct.get(sc_family$LAYOUT, sc_family$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_char sc_family
     * }
     */
    public static void sc_family(MemorySegment struct, byte fieldValue) {
        struct.set(sc_family$LAYOUT, sc_family$OFFSET, fieldValue);
    }

    private static final OfShort ss_sysaddr$LAYOUT = (OfShort)$LAYOUT.select(groupElement("ss_sysaddr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_int16_t ss_sysaddr
     * }
     */
    public static final OfShort ss_sysaddr$layout() {
        return ss_sysaddr$LAYOUT;
    }

    private static final long ss_sysaddr$OFFSET = 2;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_int16_t ss_sysaddr
     * }
     */
    public static final long ss_sysaddr$offset() {
        return ss_sysaddr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_int16_t ss_sysaddr
     * }
     */
    public static short ss_sysaddr(MemorySegment struct) {
        return struct.get(ss_sysaddr$LAYOUT, ss_sysaddr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_int16_t ss_sysaddr
     * }
     */
    public static void ss_sysaddr(MemorySegment struct, short fieldValue) {
        struct.set(ss_sysaddr$LAYOUT, ss_sysaddr$OFFSET, fieldValue);
    }

    private static final OfInt sc_id$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sc_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_int32_t sc_id
     * }
     */
    public static final OfInt sc_id$layout() {
        return sc_id$LAYOUT;
    }

    private static final long sc_id$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_int32_t sc_id
     * }
     */
    public static final long sc_id$offset() {
        return sc_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_int32_t sc_id
     * }
     */
    public static int sc_id(MemorySegment struct) {
        return struct.get(sc_id$LAYOUT, sc_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_int32_t sc_id
     * }
     */
    public static void sc_id(MemorySegment struct, int fieldValue) {
        struct.set(sc_id$LAYOUT, sc_id$OFFSET, fieldValue);
    }

    private static final OfInt sc_unit$LAYOUT = (OfInt)$LAYOUT.select(groupElement("sc_unit"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_int32_t sc_unit
     * }
     */
    public static final OfInt sc_unit$layout() {
        return sc_unit$LAYOUT;
    }

    private static final long sc_unit$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_int32_t sc_unit
     * }
     */
    public static final long sc_unit$offset() {
        return sc_unit$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_int32_t sc_unit
     * }
     */
    public static int sc_unit(MemorySegment struct) {
        return struct.get(sc_unit$LAYOUT, sc_unit$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_int32_t sc_unit
     * }
     */
    public static void sc_unit(MemorySegment struct, int fieldValue) {
        struct.set(sc_unit$LAYOUT, sc_unit$OFFSET, fieldValue);
    }

    private static final SequenceLayout sc_reserved$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("sc_reserved"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static final SequenceLayout sc_reserved$layout() {
        return sc_reserved$LAYOUT;
    }

    private static final long sc_reserved$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static final long sc_reserved$offset() {
        return sc_reserved$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static MemorySegment sc_reserved(MemorySegment struct) {
        return struct.asSlice(sc_reserved$OFFSET, sc_reserved$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static void sc_reserved(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, sc_reserved$OFFSET, sc_reserved$LAYOUT.byteSize());
    }

    private static long[] sc_reserved$DIMS = { 5 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static long[] sc_reserved$dimensions() {
        return sc_reserved$DIMS;
    }
    private static final VarHandle sc_reserved$ELEM_HANDLE = sc_reserved$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static int sc_reserved(MemorySegment struct, long index0) {
        return (int)sc_reserved$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * u_int32_t sc_reserved[5]
     * }
     */
    public static void sc_reserved(MemorySegment struct, long index0, int fieldValue) {
        sc_reserved$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

