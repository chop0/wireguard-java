// Generated by jextract

package ax.xz.raw.posix.osx.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class osx_tun_h {

    osx_tun_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.loaderLookup()
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int SYSPROTO_CONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SYSPROTO_CONTROL 2
     * }
     */
    public static int SYSPROTO_CONTROL() {
        return SYSPROTO_CONTROL;
    }
    private static final int AF_SYS_CONTROL = (int)2L;
    /**
     * {@snippet lang=c :
     * #define AF_SYS_CONTROL 2
     * }
     */
    public static int AF_SYS_CONTROL() {
        return AF_SYS_CONTROL;
    }
    private static final int SOCK_DGRAM = (int)2L;
    /**
     * {@snippet lang=c :
     * #define SOCK_DGRAM 2
     * }
     */
    public static int SOCK_DGRAM() {
        return SOCK_DGRAM;
    }
    private static final int AF_INET = (int)2L;
    /**
     * {@snippet lang=c :
     * #define AF_INET 2
     * }
     */
    public static int AF_INET() {
        return AF_INET;
    }
    private static final int AF_INET6 = (int)30L;
    /**
     * {@snippet lang=c :
     * #define AF_INET6 30
     * }
     */
    public static int AF_INET6() {
        return AF_INET6;
    }
    private static final int AF_SYSTEM = (int)32L;
    /**
     * {@snippet lang=c :
     * #define AF_SYSTEM 32
     * }
     */
    public static int AF_SYSTEM() {
        return AF_SYSTEM;
    }

    private static class __error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            osx_tun_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    osx_tun_h.findOrThrow("__error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static FunctionDescriptor __error$descriptor() {
        return __error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MethodHandle __error$handle() {
        return __error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int *__error()
     * }
     */
    public static MemorySegment __error() {
        var mh$ = __error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__error");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final long CTLIOCGINFO = 3227799043L;
    /**
     * {@snippet lang=c :
     * #define CTLIOCGINFO 3227799043
     * }
     */
    public static long CTLIOCGINFO() {
        return CTLIOCGINFO;
    }
    private static final int PF_SYSTEM = (int)32L;
    /**
     * {@snippet lang=c :
     * #define PF_SYSTEM 32
     * }
     */
    public static int PF_SYSTEM() {
        return PF_SYSTEM;
    }
    private static final long SIOCAIFADDR_IN6 = 2155899162L;
    /**
     * {@snippet lang=c :
     * #define SIOCAIFADDR_IN6 2155899162
     * }
     */
    public static long SIOCAIFADDR_IN6() {
        return SIOCAIFADDR_IN6;
    }
    private static final long SIOCAIFADDR = 2151704858L;
    /**
     * {@snippet lang=c :
     * #define SIOCAIFADDR 2151704858
     * }
     */
    public static long SIOCAIFADDR() {
        return SIOCAIFADDR;
    }
}

