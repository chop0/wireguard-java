// Generated by jextract

package ax.xz.raw.posix.osx.gen;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct in6_addrlifetime {
 *     time_t ia6t_expire;
 *     time_t ia6t_preferred;
 *     u_int32_t ia6t_vltime;
 *     u_int32_t ia6t_pltime;
 * }
 * }
 */
public class in6_addrlifetime {

    in6_addrlifetime() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        osx_tun_h.C_LONG.withName("ia6t_expire"),
        osx_tun_h.C_LONG.withName("ia6t_preferred"),
        osx_tun_h.C_INT.withName("ia6t_vltime"),
        osx_tun_h.C_INT.withName("ia6t_pltime")
    ).withName("in6_addrlifetime");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfLong ia6t_expire$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ia6t_expire"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t ia6t_expire
     * }
     */
    public static final OfLong ia6t_expire$layout() {
        return ia6t_expire$LAYOUT;
    }

    private static final long ia6t_expire$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t ia6t_expire
     * }
     */
    public static final long ia6t_expire$offset() {
        return ia6t_expire$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t ia6t_expire
     * }
     */
    public static long ia6t_expire(MemorySegment struct) {
        return struct.get(ia6t_expire$LAYOUT, ia6t_expire$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t ia6t_expire
     * }
     */
    public static void ia6t_expire(MemorySegment struct, long fieldValue) {
        struct.set(ia6t_expire$LAYOUT, ia6t_expire$OFFSET, fieldValue);
    }

    private static final OfLong ia6t_preferred$LAYOUT = (OfLong)$LAYOUT.select(groupElement("ia6t_preferred"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * time_t ia6t_preferred
     * }
     */
    public static final OfLong ia6t_preferred$layout() {
        return ia6t_preferred$LAYOUT;
    }

    private static final long ia6t_preferred$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * time_t ia6t_preferred
     * }
     */
    public static final long ia6t_preferred$offset() {
        return ia6t_preferred$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * time_t ia6t_preferred
     * }
     */
    public static long ia6t_preferred(MemorySegment struct) {
        return struct.get(ia6t_preferred$LAYOUT, ia6t_preferred$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * time_t ia6t_preferred
     * }
     */
    public static void ia6t_preferred(MemorySegment struct, long fieldValue) {
        struct.set(ia6t_preferred$LAYOUT, ia6t_preferred$OFFSET, fieldValue);
    }

    private static final OfInt ia6t_vltime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ia6t_vltime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_vltime
     * }
     */
    public static final OfInt ia6t_vltime$layout() {
        return ia6t_vltime$LAYOUT;
    }

    private static final long ia6t_vltime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_vltime
     * }
     */
    public static final long ia6t_vltime$offset() {
        return ia6t_vltime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_vltime
     * }
     */
    public static int ia6t_vltime(MemorySegment struct) {
        return struct.get(ia6t_vltime$LAYOUT, ia6t_vltime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_vltime
     * }
     */
    public static void ia6t_vltime(MemorySegment struct, int fieldValue) {
        struct.set(ia6t_vltime$LAYOUT, ia6t_vltime$OFFSET, fieldValue);
    }

    private static final OfInt ia6t_pltime$LAYOUT = (OfInt)$LAYOUT.select(groupElement("ia6t_pltime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_pltime
     * }
     */
    public static final OfInt ia6t_pltime$layout() {
        return ia6t_pltime$LAYOUT;
    }

    private static final long ia6t_pltime$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_pltime
     * }
     */
    public static final long ia6t_pltime$offset() {
        return ia6t_pltime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_pltime
     * }
     */
    public static int ia6t_pltime(MemorySegment struct) {
        return struct.get(ia6t_pltime$LAYOUT, ia6t_pltime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * u_int32_t ia6t_pltime
     * }
     */
    public static void ia6t_pltime(MemorySegment struct, int fieldValue) {
        struct.set(ia6t_pltime$LAYOUT, ia6t_pltime$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

